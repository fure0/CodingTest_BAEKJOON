AC

[입력]
첫째 줄에 테스트 케이스의 개수 T가 주어진다. T는 최대 100이다.
각 테스트 케이스의 첫째 줄에는 수행할 함수 p가 주어진다. p의 길이는 1보다 크거나 같고, 100,000보다 작거나 같다.
다음 줄에는 배열에 들어있는 수의 개수 n이 주어진다. (0 ≤ n ≤ 100,000)
다음 줄에는 [x1,...,xn]과 같은 형태로 배열에 들어있는 정수가 주어진다. (1 ≤ xi ≤ 100)
전체 테스트 케이스에 주어지는 p의 길이의 합과 n의 합은 70만을 넘지 않는다.

[출력]
각 테스트 케이스에 대해서, 입력으로 주어진 정수 배열에 함수를 수행한 결과를 출력한다. 만약, 에러가 발생한 경우에는 error를 출력한다.

[접근]
변수
StringBuilder 사용
ArrayDeque<Integer> deque;
int T // 테스트 케이스

while
    String command // 문제에서 p에 해당하는 명령어
    int n = Integer.parseInt(br.readLine());

    st = new StringTokenizer(br.readLine(), "[],");

    // 덱에 배열 원소를 넣어준다.
    for(int i = 0; i < n; i++) {

    AC(command, deque) 호출

    sb 출력


static void AC(String command, ArrayDeque<Integer> deque) // 데이터 이상없는지 먼저 검사
    boolean isRight = true; // 정방향
    for(char cmd : command.toCharArray()) {
        if(cmd == 'R') {
        // 방향을 바꿔준다.

        // D 함수이면서 isRight가 true 일 경우
            pollFirst null 체크
        // 반대 경우
            pollLast null 체크
        


    // 모든 함수들이 정상적으로 작동했다면 덱의 남은 요소들을 출력문으로 만들어준다.
    makePrintString(deque, isRight);

public static void makePrintString(ArrayDeque<Integer> deque, boolean isRight)
