토마토

[입력]
첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다. 
M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 
단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다. 
둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다. 
즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 
각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. 
정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 
이러한 N개의 줄이 H번 반복하여 주어진다.

토마토가 하나 이상 있는 경우만 입력으로 주어진다.

[출력]
여러분은 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력해야 한다. 
만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

[접근법]

변수선언
dx = {0, 0, 0, 0 ,-1, 1}
dy = {0, 0, -1, 1, 0, 0}
dh = {-1, 1, 0, 0, 0, 0}

node class 선언

M,N,H
int[][][] box
// 입력 받는 값은 M,N,H 이지만 [H][N][M] 순이 편하다
queue 선언

3중루프 하면서 1인경우 box에 담음
box[][][] == 1 이면 queue에 넣는다

모두다 익었을 경우 체크

bfd실행

3중 루프로 체크
익지 않은게 남아있는가?
최소 몇일이 걸리는가? maxval 갱신 
// 최대 값 - 1 --> 걸린 일수
// 1부터 시작하니까 2 -> 3 ->4 이런식이라 -1 해야된다.

